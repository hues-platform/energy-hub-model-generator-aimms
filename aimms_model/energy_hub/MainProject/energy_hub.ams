## ams_version=1.0
Model Energy_Hub_Model {
	DeclarationSection Sets {
		Set Time {
			SubsetOf: Integers;
			Index: t, s;
			InitialData: data{1 ..168};
		}
		Set Energy_conversion_technologies {
			Index: conv;
			Definition: data {Gas_CHP,Gas_boiler,Grid,Heat_pump,Solar_PV,Solar_thermal};
		}
		Set Energy_carriers {
			Index: x;
			Definition: data {Elec,Heat};
		}
		Set Scenarios {
			SubsetOf: Integers;
			Index: z;
			Definition: data{1 ..2};
		}
	}
	DeclarationSection Parameters {
		Parameter Prob {
			IndexDomain: z;
			Definition:data {1:50,2:50}
		}
		Parameter pr_P_W_TRLplus {
			IndexDomain: t;
			Range: nonnegative;
		}
		Parameter pr_P_D_TRLplus {
			IndexDomain: t;
			Range: nonnegative;
		}
		Parameter pr_E_W_TRLplus {
			Range: nonnegative;
			Definition:0.06;
		}
		Parameter pr_E_D_TRLplus {
			Range: nonnegative;
			Definition:0.06;
		}
		Parameter a_TRLplus {
			IndexDomain: (t,z);
			Range: binary;
		}
		Parameter Loads {
			IndexDomain: (t,x);
		}
		Parameter Operating_costs {
			IndexDomain: conv | conv <> 'Grid';
			Definition: data {Gas_CHP:0.09,Gas_boiler:0.09,Heat_pump:0,Solar_PV:0,Solar_thermal:0};
		}
		Parameter Operating_costs_grid {
			Definition:0.24;
		}
		Parameter OMV_costs {
			IndexDomain: conv;
			Definition: data {Gas_CHP:0,Gas_boiler:0,Grid:0,Heat_pump:0,Solar_PV:0,Solar_thermal:0 };
		}
		Parameter Electricity_feedin_price_renewables {
			Definition:0.14;
		}
		Parameter Electricity_feedin_price_nonrenewables {
			Definition:0.14;
		}
		Parameter Cmatrix {
			IndexDomain: (x,conv);
			Definition: { data {(Heat,Gas_boiler):0.94,(Elec,Grid):1,(Heat,Heat_pump):3.2,(Elec,Solar_PV):0.14,(Heat,Solar_thermal):0.46,(Elec,Gas_CHP):0.3,(Heat,Gas_CHP):0.519,(Elec,Heat_pump):-1}
			}
		}
		Parameter Capacity {
			IndexDomain:conv;
			Definition: { data {Heat_pump:2200,Gas_boiler:1340,Gas_CHP:390,Solar_PV:4890,Solar_thermal:50};
			}
		}
		Parameter Storage_max_charge_rate {
			IndexDomain: x;
			Definition: data {Elec:0.3,Heat:0.25 };
		}
		Parameter Storage_max_discharge_rate {
			IndexDomain: x;
			Definition: data {Elec:0.3,Heat:0.25 };
		}
		Parameter Storage_standing_losses {
			IndexDomain: x;
			Definition: data {Elec:0.001,Heat:0.01 };
		}
		Parameter Storage_charging_efficiency {
			IndexDomain: x;
			Definition: data {Elec:0.9,Heat:0.9 };
		}
		Parameter Storage_discharging_efficiency {
			IndexDomain: x;
			Definition: data {Elec:0.9,Heat:0.9 };
		}
		Parameter Storage_min_SOC {
			IndexDomain: x;
			Definition: data {Elec:0.3,Heat:0 };
		}
		Parameter Storage_capacity {
			IndexDomain:(x);
			Definition: { data {Elec:100,Heat:100};
			}
		}
		Parameter Technology_carbon_factors {
			IndexDomain: (conv);
			Definition: data {Gas_CHP:0.198,Gas_boiler:0.198,Grid:0.137,Heat_pump:0,Solar_PV:0,Solar_thermal:0 };
		}
		Parameter Solar_radiation {
			IndexDomain: t;
		}
		Parameter Big_M {
			Definition: 100000;
		}
	}
	DeclarationSection Variables {
		Variable Income_E_W_TRLplus {
			IndexDomain: (t,x,z)| x='Elec';
			Range: nonnegative;
			Definition: pr_E_W_TRLplus*a_TRLplus(t,z)*P_W_TRLplus(t,x);
		}
		Variable Income_E_D_TRLplus {
			IndexDomain: (t,x,z)| x='Elec';
			Range: nonnegative;
			Definition: pr_E_D_TRLplus*a_TRLplus(t,z)*P_D_TRLplus(t,x);
		}
		Variable Income_P_W_TRLplus {
			IndexDomain: (t,x)| x='Elec';
			Range: nonnegative;
			Definition: pr_P_W_TRLplus(t)*P_W_TRLplus(t,x)/168;
		}
		Variable Income_P_D_TRLplus {
			IndexDomain: (t,x)| x='Elec';
			Range: nonnegative;
			Definition: pr_P_D_TRLplus(t)*P_D_TRLplus(t,x)/4;
		}
		Variable P_TRLplus_storage {
			IndexDomain: (t,x,z)| x='Elec';
			Range: nonnegative;
		}
		Variable P_W_TRLplus {
			IndexDomain: (t,x) | x='Elec';
			Range: nonnegative;
		}
		Variable P_D_TRLplus {
			IndexDomain: (t,x) | x='Elec';
			Range: nonnegative;
		}
		Variable Input_energy {
			IndexDomain: (t,conv);
			Range: nonnegative;
		}
		Variable Exported_energy_nonrenewable {
			IndexDomain: (t,x) | x = "Elec";
			Range: nonnegative;
		}
		Variable Exported_energy_renewable {
			IndexDomain: (t,x) | x = "Elec";
			Range: nonnegative;
		}
		Variable Exported_energy_storage {
			IndexDomain: (t,x) | x = "Elec";
			Range: nonnegative;
		}
		Variable Output_energy  {
			IndexDomain: (t,x,conv) | Cmatrix(x,conv) > 0;
			Range: nonnegative;
			Definition: Input_energy(t,conv) * Cmatrix(x,conv);
		}
		Variable Operating_cost_per_technology {
			IndexDomain: conv | conv <> 'Grid';
			Range: free;
			Definition: Operating_costs(conv) * sum(t,Input_energy(t,conv));
		}
		Variable Maintenance_cost_per_technology {
			IndexDomain: conv;
			Range: nonnegative;
			Definition: sum((t,x), Maintenance_cost_per_timestep(t,conv,x));
		}
		Variable Total_cost_per_technology {
			IndexDomain: conv | conv <> 'Grid';
			Range: free;
			Definition: Operating_cost_per_technology(conv) + Maintenance_cost_per_technology(conv);
		}
		Variable Total_cost_grid {
			Range: free;
			Definition: sum(conv | conv = 'Grid', Operating_cost_grid + Maintenance_cost_per_technology(conv));
		}
		Variable Storage_input_energy {
			IndexDomain: (t,x);
			Range: nonnegative;
		}
		Variable Storage_output_energy {
			IndexDomain: (t,x);
			Range: nonnegative;
		}
		Variable Storage_SOC {
			IndexDomain: (t,x);
			Range: nonnegative;
		}
		Variable Energy_demands {
			IndexDomain: (t,x);
			Range: nonnegative;
			Definition: Loads(t,x);
		}
		Variable Total_carbon_per_technology {
			IndexDomain: conv;
			Range: free;
			Definition: Technology_carbon_factors(conv)*sum(t,Input_energy(t,conv));
		}
		Variable Total_carbon_per_timestep {
			IndexDomain: t;
			Range: free;
			Definition: sum(conv,Technology_carbon_factors(conv)*Input_energy(t,conv));
		}
	}
	DeclarationSection Objective_functions {
		Variable IncomeAvail {
			Range: nonnegative;
			Definition: sum(t, pr_P_W_TRLplus(t)*P_W_TRLplus(t,'Elec'))/168 +  sum(t, pr_P_D_TRLplus(t)*P_D_TRLplus(t,'Elec'))/4;
		}
		Variable Income_via_exports {
			IndexDomain: z;
			Range: nonnegative;
			Definition: sum(x | x = 'Elec', Electricity_feedin_price_renewables * sum(t, Exported_energy_renewable(t,x)) + Electricity_feedin_price_nonrenewables * sum(t, Exported_energy_nonrenewable(t,x))) + pr_E_W_TRLplus*sum(t,a_TRLplus(t,z)*P_W_TRLplus(t,'Elec'))*4/4 +  pr_E_D_TRLplus*sum(t,a_TRLplus(t,z)*P_D_TRLplus(t,'Elec'))*4/4;
		}
		Variable Total_cost {
			Range: free;
			Definition: {
				-IncomeAvail + sum(z,Prob(z)*(Operating_cost(z) + Operating_cost_grid(z) + Maintenance_cost(z) - Income_via_exports(z)))/2;
			}
		}
		Variable Operating_cost_grid {
			Range: free;
			Definition: sum(conv | conv = 'Grid', sum(t, Operating_costs_grid * Input_energy(t,conv)));
		}
		Variable Operating_cost {
			Range: free;
			Definition: sum(conv | conv <> 'Grid', Operating_costs(conv) * sum(t,Input_energy(t,conv)));
		}
		Variable Maintenance_cost {
			Range: nonnegative;
			Definition: sum((t,conv,x), Maintenance_cost_per_timestep(t,conv,x));
		}
		Variable Maintenance_cost_per_timestep {
			IndexDomain: (t,conv,x) | Cmatrix(x,conv) > 0;
			Range: free;
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) * OMV_costs(conv);
		}
		Variable Total_carbon {
			Range: free;
			Definition: sum(conv,Technology_carbon_factors(conv)*sum(t,Input_energy(t,conv)));
		}
	}
	DeclarationSection Constraints {
		Constraint P_TRLplus_bid_constraint {
			IndexDomain: (t,x,z);
			Definition: P_W_TRLplus(t,x) + P_D_TRLplus(t,x) <= sum(conv, Capacity('Elec',conv)) - Loads(t,x) - Exported_energy_renewable(t,'Elec') - Exported_energy_nonrenewable(t,'Elec') + P_TRLplus_storage(t,'Elec',z);
		}
		Constraint P_W_TRLplus_week_constraint {
			IndexDomain: (t,x) | mod(t,168) <> 0 AND t<>first(Time) AND x="Elec";
			Definition: P_W_TRLplus(t,x) = P_W_TRLplus(t-1,x);
		}
		Constraint P_D_TRLplus_4h_constraint {
			IndexDomain: (t,x) | mod(mod(t,24),4) <> 0 AND x="Elec";
			Definition: P_D_TRLplus(t,x) = P_D_TRLplus(t+1,x);
		}
		Constraint Pstorage_TRLplus_energy_constraint {
			IndexDomain: (t,x,z) | x="Elec";
			Definition: P_TRLplus_storage(t,x,z) <= Storage_SOC(t,x,z) - (Storage_capacity(x) * Storage_min_SOC(x));
		}
		Constraint Pstorage_TRLplus_discharge_constraint {
			IndexDomain: (t,x,z) | x="Elec";
			Definition: P_TRLplus_storage(t,x,z) <= Storage_max_discharge_rate(x)*Storage_capacity(x);
		}
		Constraint Load_balance_constraint {
			IndexDomain: (t,x,z);
			Definition: sum(conv, Input_energy(t,conv,z) * Cmatrix(x,conv)) + Storage_output_energy(t,x) - Storage_input_energy(t,x,z) = Loads(t,x) + Exported_energy_renewable(t,x) + Exported_energy_nonrenewable(t,x)+ a_TRLplus(t,z)*P_W_TRLplus(t,x) + a_TRLplus(t,z)*P_D_TRLplus(t,x);
		}
		Constraint Capacity_constraint_Gas_CHP {
			IndexDomain: (t,x,conv) | (conv = 'Gas_CHP') AND (x = 'Elec');
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) <= Capacity(conv);
		}
		Constraint Capacity_constraint_Gas_boiler {
			IndexDomain: (t,x,conv) | (conv = 'Gas_boiler') AND (x = 'Heat');
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) <= Capacity(conv);
		}
		Constraint Capacity_constraint_Heat_pump {
			IndexDomain: (t,x,conv) | (conv = 'Heat_pump') AND (x = 'Heat');
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) <= Capacity(conv);
		}
		Constraint Solar_input_constraint {
			IndexDomain: (t,conv) | (conv ='Solar_PV' OR conv ='Solar_thermal');
			Definition: Input_energy(t,conv) <= Solar_radiation(t) * Capacity(conv) / 1000;
		}
		Constraint Electricity_export_solar_constraint {
			IndexDomain: (t,x) | x='Elec';
			Definition: Exported_energy_renewable(t,x) <= sum(conv | (conv ='Solar_PV'), Input_energy(t,conv) * Cmatrix(x,conv));
		}
		Constraint Electricity_export_nonsolar_constraint {
			IndexDomain: (t,x) | x='Elec';
			Definition: Exported_energy_nonrenewable(t,x) <= sum(conv | (conv ='Gas_CHP'), Input_energy(t,conv) * Cmatrix(x,conv));
		}
		Constraint Electricity_export_storage_constraint {
			IndexDomain: (t,x) | x='Elec';
			Definition: Exported_energy_storage(t,x) <= Storage_output_energy(t,x);
		}
		Constraint Storage_balance_constraint {
			IndexDomain: (t,x) | t > first(Time);
			Definition: Storage_SOC(t,x) = (1 - Storage_standing_losses(x)) * Storage_SOC(t-1,x) + Storage_charging_efficiency(x) *  Storage_input_energy(t,x) - (1 / Storage_discharging_efficiency(x)) * Storage_output_energy(t,x);
		}
		Constraint Storage_charging_rate_constraint {
			IndexDomain: (t,x);
			Definition: Storage_input_energy(t,x) <= Storage_max_charge_rate(x) * Storage_capacity(x);
		}
		Constraint Storage_discharging_rate_constraint {
			IndexDomain: (t,x);
			Definition: Storage_output_energy(t,x) <= Storage_max_discharge_rate(x) * Storage_capacity(x);
		}
		Constraint Storage_capacity_constraint {
			IndexDomain: (t,x);
			Definition: Storage_SOC(t,x) <= Storage_capacity(x);
		}
		Constraint Storage_minimum_SOC_constraint {
			IndexDomain: (t,x);
			Definition: Storage_SOC(t,x) >= Storage_capacity(x) * Storage_min_SOC(x);
		}
		Constraint Storage_initialization_2 {
			IndexDomain: (t,x) | t = first(Time);
			Definition: Storage_SOC(t,x) = Storage_SOC(last(Time),x);
		}
		Constraint Storage_initialization_3 {
			IndexDomain: (t,x) | t = first(Time);
			Definition: Storage_output_energy(t,x) = 0;
		}
	}
	DeclarationSection Mathematical_programs {
		MathematicalProgram Cost_minimization {
			Objective: Total_cost;
			Direction: minimize;
			Constraints: AllConstraints;
			Variables: AllVariables;
			Type: Automatic;
		}
	}
	Procedure Main_Execution {
		Body: {
			empty AllVariables;
			Load_Input_Data;
			solve Cost_minimization;
			Write_Output_Data;
		}
	}
	Procedure Load_Input_Data {
		Body: {
			Spreadsheet::RetrieveParameter( "Hourly TRLplus activation 2016 binary.xlsx", a_TRLplus(t,z),"A1:A168","hour of activation");
			Spreadsheet::RetrieveParameter( "TRL+ weekly prices over hour.xlsx", pr_P_W_TRLplus(t),"A1:A168","TRL+week price");
			Spreadsheet::RetrieveParameter( "TRL+ 4h capacity prices over hour.xlsx", pr_P_D_TRLplus(t),"A1:A168","TRL+ P_4h price");
			Spreadsheet::RetrieveParameter( "input_data/Heat_demand.xlsx", Loads(t,'Heat'),"A1:A168","demand");
			Spreadsheet::RetrieveParameter( "input_data/Elec_demand.xlsx", Loads(t,'Elec'),"A1:A168","demand");
			Spreadsheet::RetrieveParameter( "input_data/solar_inputs.xlsx", Solar_radiation(t),"A1:A168","solar");
		}
	}
	Procedure Write_Output_Data {
		Body: {
			Spreadsheet::CreateWorkbook("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx","P_TRLplus");
			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",P_W_TRLplus,"B2:C169","A2:A169","B1:C1","P_TRLplus",0,1,1);
			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",P_D_TRLplus,"E2:F169","D2:D169","E1:F1","P_TRLplus",0,1,1);
			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx","P_TRLplus_storage");
			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",P_TRLplus_storage,"B2:C169","A2:A169","B1:C1","P_TRLplus_storage",0,1,1);
			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx","Income_E_TRLplus");
			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",Income_E_W_TRLplus,"B2:C169","A2:A169","B1:C1","Income_E_TRLplus",0,1,1);
			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",Income_E_D_TRLplus,"E2:F169","D2:D169","E1:F1","Income_E_TRLplus",0,1,1);
			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx","Income_P_TRLplus");
			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",Income_P_W_TRLplus,"B2:C169","A2:A169","B1:C1","Income_P_TRLplus",0,1,1);
			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",Income_P_D_TRLplus,"E2:F169","D2:D169","E1:F1","Income_P_TRLplus",0,1,1);
			Spreadsheet::CloseWorkbook("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",1);
			Spreadsheet::CreateWorkbook("results/Electricity balancing market participation/results_demands.xlsx","Energy_demands");
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_demands.xlsx",Energy_demands,"B2:C169","A2:A169","B1:C1","Energy_demands",0,1,1);
			Spreadsheet::CloseWorkbook("results/Electricity balancing market participation/results_demands.xlsx",1);
			Spreadsheet::CreateWorkbook("results/Electricity balancing market participation/results_conversion.xlsx","Input_energy");
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_conversion.xlsx",Input_energy,"B2:G169","A2:A169","B1:G1","Input_energy",0,1,1);
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_conversion.xlsx","Exported_energy_renewable");
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_conversion.xlsx",Exported_energy_renewable,"B2:C169","A2:A169","B1:C1","Exported_energy_renewable",0,1,1);
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_conversion.xlsx","Exported_energy_nonrenewable");
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_conversion.xlsx",Exported_energy_nonrenewable,"B2:C169","A2:A169","B1:C1","Exported_energy_nonrenewable",0,1,1);
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_conversion.xlsx","Output_energy_Elec");
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_conversion.xlsx",Output_energy(t,'Elec',conv),"B2:G169","A2:A169","B1:G1","Output_energy_Elec",0,1,1);
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_conversion.xlsx","Output_energy_Heat");
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_conversion.xlsx",Output_energy(t,'Heat',conv),"B2:G169","A2:A169","B1:G1","Output_energy_Heat",0,1,1);
			Spreadsheet::CloseWorkbook("results/Electricity balancing market participation/results_conversion.xlsx",1);
			Spreadsheet::CreateWorkbook("results/Electricity balancing market participation/results_storage.xlsx","Storage_input_energy");
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_storage.xlsx","Storage_output_energy");
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_storage.xlsx","Storage_SOC");
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_storage.xlsx",Storage_input_energy,"B2:C169","A2:A169","B1:C1","Storage_input_energy",0,1,1);
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_storage.xlsx",Storage_output_energy,"B2:C169","A2:A169","B1:C1","Storage_output_energy",0,1,1);
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_storage.xlsx",Storage_SOC,"B2:C169","A2:A169","B1:C1","Storage_SOC",0,1,1);
			Spreadsheet::CloseWorkbook("results/Electricity balancing market participation/results_storage.xlsx",1);
			Spreadsheet::CreateWorkbook("results/Electricity balancing market participation/results_costs.xlsx","Operating_cost_per_technology");
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_costs.xlsx","Maintenance_cost_per_technology");
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_costs.xlsx","Capital_cost_per_technology");
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_costs.xlsx","Total_cost_per_technology");
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_costs.xlsx","Operating_cost_grid");
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_costs.xlsx","Total_cost_grid");
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_costs.xlsx","Capital_cost_per_storage");
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_costs.xlsx","Total_cost_per_storage");
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_costs.xlsx","Income_via_exports");
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_costs.xlsx",Maintenance_cost_per_technology,"B1:B7","A1:A7","","Maintenance_cost_per_technology",0,1,3);
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_costs.xlsx",Operating_cost_per_technology,"B1:B7","A1:A7","","Operating_cost_per_technology",0,1,3);
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_costs.xlsx",Total_cost_per_technology,"B1:B7","A1:A7","","Total_cost_per_technology",0,1,3);
			Spreadsheet::AssignValue("results/Electricity balancing market participation/results_costs.xlsx",Operating_cost_grid,"A1:A1","Operating_cost_grid");
			Spreadsheet::AssignValue("results/Electricity balancing market participation/results_costs.xlsx",Total_cost_grid,"A1:A1","Total_cost_grid");
			Spreadsheet::AssignValue("results/Electricity balancing market participation/results_costs.xlsx",Income_via_exports,"A1:A1","Income_via_exports");
			Spreadsheet::CloseWorkbook("results/Electricity balancing market participation/results_costs.xlsx",1);
			Spreadsheet::CreateWorkbook("results/Electricity balancing market participation/results_emissions.xlsx","Total_carbon_per_technology");
			Spreadsheet::AddNewSheet("results/Electricity balancing market participation/results_emissions.xlsx","Total_carbon_per_timestep");
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_emissions.xlsx",Total_carbon_per_technology,"B1:B6","A1:A6","","Total_carbon_per_technology",0,1,3);
			Spreadsheet::AssignTable("results/Electricity balancing market participation/results_emissions.xlsx",Total_carbon_per_timestep,"B1:B168","A1:A168","","Total_carbon_per_timestep",0,1,3);
			Spreadsheet::CloseWorkbook("results/Electricity balancing market participation/results_emissions.xlsx",1);
		}
	}
	Procedure Main_Termination {
		Body: {
			return 1;
		}
	}
}