## ams_version=1.0
Model Energy_Hub_Model {
	DeclarationSection Sets {
		Set Time {
			SubsetOf: Integers;
			Index: t, s;
			InitialData: data{1 ..8760};
		}
		Set Energy_conversion_technologies {
			Index: conv;
			Definition: data {Gas_CHP,Gas_boiler,Grid,Heat_pump,Solar_PV,Solar_thermal};
		}
		Set Energy_carriers {
			Index: x;
			Definition: data {Elec,Heat};
		}
	}
	DeclarationSection Parameters {
		Parameter Loads {
			IndexDomain: (t,x);
		}
		Parameter Operating_costs {
			IndexDomain: conv | conv <> 'Grid';
			Definition: data {Gas_CHP:0.09,Gas_boiler:0.09,Heat_pump:0,Solar_PV:0,Solar_thermal:0};
		}
		Parameter Operating_costs_grid {
			Definition:0.24;
		}
		Parameter OMV_costs {
			IndexDomain: conv;
			Definition: data {Gas_CHP:0.021,Gas_boiler:0.01,Grid:0,Heat_pump:0.1,Solar_PV:0.06,Solar_thermal:0.12 };
		}
		Parameter Linear_capital_costs {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0;
			Definition: {
			data {(Elec,Gas_CHP):1500,(Elec,Grid):0,(Elec,Solar_PV):3500,(Heat,Gas_boiler):200,(Heat,Heat_pump):1000,(Heat,Solar_thermal):2900}
			};
		}
		Parameter Fixed_capital_costs {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0;
			Definition: {
			data {(Elec,Gas_CHP):0,(Elec,Grid):0,(Elec,Solar_PV):0,(Heat,Gas_boiler):0,(Heat,Heat_pump):0,(Heat,Solar_thermal):0}
			};
		}
		Parameter Electricity_feedin_price {
			Definition:0.14;
		}
		Parameter Interest_rate {
			Definition:0.08;
		}
		Parameter Lifetime {
			IndexDomain: conv | conv <> "Grid";
			Definition: data {Gas_CHP:20,Gas_boiler:30,Grid:0,Heat_pump:20,Solar_PV:20,Solar_thermal:35 };
		}
		Parameter CRF_tech {
			IndexDomain: conv | conv <> "Grid";
			Definition: Interest_rate/(1-(1/((1+Interest_rate)^(Lifetime(conv)))));
		}
		Parameter Cmatrix {
			IndexDomain: (x,conv);
			Definition: { data {(Elec,Grid):1,(Elec,Solar_PV):0.14,(Heat,Gas_boiler):0.94,(Heat,Heat_pump):3.2,(Heat,Solar_thermal):0.46,(Elec,Gas_CHP):0.3,(Heat,Gas_CHP):0.519,(Elec,Heat_pump):-1}
			}
		}
		Parameter Min_allowable_capacity {
			IndexDomain: conv | conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump';
			Definition: data {Gas_CHP:50,Gas_boiler:0,Heat_pump:0 };
		}
		Parameter Max_allowable_capacity {
			IndexDomain: conv | conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump';
			Definition: data {Gas_CHP:50,Gas_boiler:100,Heat_pump:100 };
		}
		!Parameter Min_allowable_capacity_grid {
		!	Definition:1000000;
		!}
		!Parameter Max_allowable_capacity_grid {
		!	Definition:1000000;
		!}
		Parameter Minimum_part_load {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump');
		!	Definition: { data {(Elec,Gas_CHP):0.5,(Elec,Grid):0,(Elec,Solar_PV):0,(Heat,Gas_CHP):0.5,(Heat,Gas_boiler):0,(Heat,Heat_pump):0,(Heat,Solar_thermal):0}
			Definition: { data {(Elec,Gas_CHP):0.5,(Elec,Grid):0,(Elec,Solar_PV):0,(Heat,Gas_CHP):0.5,(Heat,Gas_boiler):0,(Heat,Heat_pump):0,(Heat,Solar_thermal):0}
			;}
		}
		Parameter Linear_capital_costs_storage {
			IndexDomain: x;
			Definition: data {Elec:100,Heat:100 };
		}
		Parameter Fixed_capital_costs_storage {
			IndexDomain: x;
			Definition: data {Elec:0,Heat:0 };
		}
		Parameter Lifetime_storage {
			IndexDomain: x;
			Definition: data {Elec:20,Heat:17 };
		}
		Parameter CRF_stor {
			IndexDomain: x;
			Definition: Interest_rate/(1-(1/((1+Interest_rate)^(Lifetime_storage(x)))));
		}
		Parameter Storage_max_charge_rate {
			IndexDomain: x;
			Definition: data {Elec:0.3,Heat:0.25 };
		}
		Parameter Storage_max_discharge_rate {
			IndexDomain: x;
			Definition: data {Elec:0.3,Heat:0.25 };
		}
		Parameter Storage_standing_losses {
			IndexDomain: x;
			Definition: data {Elec:0.001,Heat:0.01 };
		}
		Parameter Storage_charging_efficiency {
			IndexDomain: x;
			Definition: data {Elec:0.9,Heat:0.9 };
		}
		Parameter Storage_discharging_efficiency {
			IndexDomain: x;
			Definition: data {Elec:0.9,Heat:0.9 };
		}
		Parameter Storage_min_SOC {
			IndexDomain: x;
			Definition: data {Elec:0.3,Heat:0 };
		}
		Parameter Storage_minimum_capacity {
			IndexDomain: x;
			Definition: data {Elec:0,Heat:0 };
		}
		Parameter Storage_maximum_capacity {
			IndexDomain: x;
			Definition: data {Elec:100,Heat:100 };
		}
		Parameter Building_roof_area {
			Definition:50;
		}
		Parameter Technology_carbon_factors {
			IndexDomain: (conv);
			Definition: data {Gas_CHP:0.198,Gas_boiler:0.198,Grid:0.137,Heat_pump:0,Solar_PV:0,Solar_thermal:0 };
		}
		Parameter Solar_radiation {
			IndexDomain: t;
		}
		Parameter Big_M {
			Definition: 100000;
		}
	}
	DeclarationSection Variables {
		Variable Input_energy {
			IndexDomain: (t,conv);
			Range: nonnegative;
		}
		Variable Exported_energy {
			IndexDomain: (t,x) | x = "Elec";
			Range: nonnegative;
		}
		Variable Installation {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0;
			Range: binary;
		}
		Variable Operation {
			IndexDomain: (t,conv) | (conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump' OR conv ='Solar_PV' OR conv ='Solar_thermal');
			Range: binary;
		}
		Variable Capacity {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0 AND conv <> 'Grid';
			Range: nonnegative;
		}
		!Variable Capacity_grid {
		!	Range: nonnegative;
		!}
		!Variable Output_energy_electricity  {
		!	IndexDomain: (t,conv) | Cmatrix('Elec',conv) > 0;
		!	Range: nonnegative;
		!	Definition: Input_energy(t,conv) * Cmatrix('Elec',conv);
		!}
		!Variable Output_energy_heat {
		!	IndexDomain: (t,conv) | Cmatrix('Heat',conv) > 0;
		!	Range: nonnegative;
		!	Definition: Input_energy(t,conv) * Cmatrix('Heat',conv);
		!}
		!Variable Operating_cost_per_technology {
		!	IndexDomain: conv | conv <> 'Grid';
		!	Range: free;
		!	Definition: Operating_costs(conv) * sum(t,Input_energy(t,conv));
		!}
		!Variable Maintenance_cost_per_technology {
		!	IndexDomain: conv;
		!	Range: nonnegative;
		!	Definition: sum((t,x), Maintenance_cost_per_timestep(t,conv,x));
		!}
		!Variable Capital_cost_per_technology {
		!	IndexDomain: conv;
		!	Range: nonnegative;
		!	Definition: sum(x, (Fixed_capital_costs(x,conv) * Installation(x,conv) + Linear_capital_costs(x,conv) * Capacity(x,conv)) * CRF_tech(conv));
		!}
		!Variable Total_cost_per_technology {
		!	IndexDomain: conv | conv <> 'Grid';
		!	Range: free;
		!	Definition: Capital_cost_per_technology(conv) + Operating_cost_per_technology(conv) + Maintenance_cost_per_technology(conv);
		!}
		!Variable Total_cost_grid {
		!	Range: free;
		!	Definition: sum(conv | conv = 'Grid', Capital_cost_per_technology(conv) + Operating_cost_grid + Maintenance_cost_per_technology(conv));
		!}
		Variable Storage_input_energy {
			IndexDomain: (t,x);
			Range: nonnegative;
		}
		Variable Storage_output_energy {
			IndexDomain: (t,x);
			Range: nonnegative;
		}
		Variable Storage_SOC {
			IndexDomain: (t,x);
			Range: nonnegative;
		}
		Variable Storage_capacity {
			IndexDomain: x;
			Range: nonnegative;
		}
		Variable Installation_storage {
			IndexDomain: x;
			Range: binary;
		}
		!Variable Capital_cost_per_storage {
		!	IndexDomain: x;
		!	Range: nonnegative;
		!	Definition: (Fixed_capital_costs_storage(x) * Installation_storage(x) + Linear_capital_costs_storage(x) * Storage_capacity(x)) * CRF_stor(x);
		!}
		!Variable Total_cost_per_storage {
		!	IndexDomain: x;
		!	Range: free;
		!	Definition: Capital_cost_per_storage(x);
		!}
		!Variable Energy_demands {
		!	IndexDomain: (t,x);
		!	Range: nonnegative;
		!	Definition: Loads(t,x);
		!}
		!Variable Total_carbon_per_technology {
		!	IndexDomain: conv;
		!	Range: free;
		!	Definition: Technology_carbon_factors(conv)*sum(t,Input_energy(t,conv));
		!}
		!Variable Total_carbon_per_timestep {
		!	IndexDomain: t;
		!	Range: free;
		!	Definition: sum(conv,Technology_carbon_factors(conv)*Input_energy(t,conv));
		!}
	}
	DeclarationSection Objective_functions {
		Variable Operating_cost_grid {
			Range: free;
			Definition: sum(conv | conv = 'Grid', sum(t, Operating_costs_grid * Input_energy(t,conv)));
		}
		Variable Operating_cost {
			Range: free;
			Definition: sum(conv | conv <> 'Grid', Operating_costs(conv) * sum(t,Input_energy(t,conv)));
		}
		Variable Maintenance_cost {
			Range: nonnegative;
			Definition: sum((t,conv,x), Maintenance_cost_per_timestep(t,conv,x));
		}
		Variable Maintenance_cost_per_timestep {
			IndexDomain: (t,conv,x) | Cmatrix(x,conv) > 0;
			Range: free;
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) * OMV_costs(conv);
		}
		Variable Income_via_exports {
			Range: nonnegative;
			Definition: sum(x | x = 'Elec', Electricity_feedin_price * sum(t, Exported_energy(t,x)));
		}
		Variable Capital_cost {
			Range: nonnegative;
			Definition: sum((x,conv), (Fixed_capital_costs(x,conv) * Installation(x,conv) + Linear_capital_costs(x,conv) * Capacity(x,conv)) * CRF_tech(conv)) + sum(x,(Fixed_capital_costs_storage(x) * Installation_storage(x) + Linear_capital_costs_storage(x) * Storage_capacity(x)) * CRF_stor(x));
		}
		Variable Total_cost {
			Range: free;
			Definition: Capital_cost + Operating_cost + Operating_cost_grid + Maintenance_cost - Income_via_exports;
		}
		Variable Total_carbon {
			Range: free;
			Definition: sum(conv,Technology_carbon_factors(conv)*sum(t,Input_energy(t,conv)));
		}
	}
	DeclarationSection Constraints {
		Constraint Load_balance_constraint {
			IndexDomain: (t,x);
			Definition: sum(conv, Input_energy(t,conv) * Cmatrix(x,conv)) + Storage_output_energy(t,x) - Storage_input_energy(t,x) = Loads(t,x) + Exported_energy(t,x);
		}
		Constraint Capacity_constraint {
			IndexDomain: (t,x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump');
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) <= Capacity(x,conv);
		}
		!Constraint Minimum_capacity_constraint {
		!	IndexDomain: (x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Gas_boiler' OR conv ='Heat_pump');
		!	Definition: Capacity(x,conv) >= Min_allowable_capacity(conv);
		!}
		Constraint Maximum_capacity_constraint {
			IndexDomain: (x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Gas_boiler' OR conv ='Heat_pump');
			Definition: Capacity(x,conv) <= Max_allowable_capacity(conv);
		}
		Constraint Dispatch_constraint {
			IndexDomain: (t,x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump' OR conv ='Solar_PV' OR conv ='Solar_thermal');
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) <= Big_M * Operation(t,conv);
		}
		Constraint Part_load_constraint {
		!	IndexDomain: (t,x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump' OR conv ='Solar_PV' OR conv ='Solar_thermal');
			IndexDomain: (t,x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Gas_CHP');
			Definition: Input_energy(t,conv) * Cmatrix(x,conv) + Big_M * (1 - Operation(t,conv)) >= Minimum_part_load(x,conv) * Capacity(x,conv);
		}
		Constraint Solar_input_constraint {
			IndexDomain: (t,conv,x) | Cmatrix(x, conv) > 0 AND (conv ='Solar_PV' OR conv ='Solar_thermal');
			Definition: Input_energy(t,conv) = Solar_radiation(t) * Capacity(x,conv) / 1000;
		}
		Constraint Roof_area_constraint {
			Definition:Capacity('Elec','Solar_PV')+Capacity('Heat','Solar_thermal') <= Building_roof_area;
		}
		Constraint Installation_constraint {
			IndexDomain: (x,conv);
			Definition: Capacity(x,conv) <= Big_M * Installation(x,conv);
		}
		Constraint Operation_constraint {
			IndexDomain: (t,x,conv) | Cmatrix(x,conv) > 0 AND (conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Grid' OR conv ='Heat_pump');
			Definition: Operation(t,conv) <= Installation(x,conv);
		}
		!Constraint Grid_capacity_violation_constraint_import {
		!	IndexDomain: (t,conv) | conv='Grid';
		!	Definition: Input_energy(t,conv) <= Capacity_grid;
		!}
		!Constraint Grid_capacity_violation_constraint_export {
		!	IndexDomain: (t,x) | x='Elec';
		!	Definition: Exported_energy(t,x) <= Capacity_grid;
		!}
		Constraint Heat_CHP_HTP_constraint {
			IndexDomain: conv | (conv ='Gas_CHP');
			Definition: Capacity('Heat',conv) = Cmatrix('Heat', conv) / Cmatrix('Elec', conv) * Capacity('Elec',conv);
		}
		Constraint Heat_CHP_HTP_constraint2 {
			IndexDomain: conv | (conv ='Gas_CHP');
			Definition: Installation('Elec',conv) = Installation('Heat',conv);
		}
		Constraint CHP_installation_constraint {
			IndexDomain: conv | (conv ='Gas_CHP');
		!	Definition: Capacity('Elec',conv) <= Max_allowable_capacity(conv) * Installation('Elec',conv);
			Definition: Capacity('Elec',conv) <= Max_allowable_capacity(conv);
		!	Definition: Capacity('Elec',conv) = Max_allowable_capacity(conv) * Installation('Elec',conv);
		}
		Constraint Storage_balance_constraint {
			IndexDomain: (t,x) | t > first(Time);
			Definition: Storage_SOC(t,x) = (1 - Storage_standing_losses(x)) * Storage_SOC(t-1,x) + Storage_charging_efficiency(x) *  Storage_input_energy(t,x) - (1 / Storage_discharging_efficiency(x)) * Storage_output_energy(t,x);
		}
		Constraint Storage_charging_rate_constraint {
			IndexDomain: (t,x);
			Definition: Storage_input_energy(t,x) <= Storage_max_charge_rate(x) * Storage_capacity(x);
		}
		Constraint Storage_discharging_rate_constraint {
			IndexDomain: (t,x);
			Definition: Storage_output_energy(t,x) <= Storage_max_discharge_rate(x) * Storage_capacity(x);
		}
		Constraint Storage_capacity_constraint {
			IndexDomain: (t,x);
			Definition: Storage_SOC(t,x) <= Storage_capacity(x);
		}
		Constraint Storage_minimum_SOC_constraint {
			IndexDomain: (t,x);
			Definition: Storage_SOC(t,x) >= Storage_capacity(x) * Storage_min_SOC(x);
		}
		Constraint Storage_installation_constraint {
			IndexDomain: x;
			Definition: Storage_capacity(x) <= Big_M * Installation_storage(x);
		}
		!Constraint Storage_minimum_capacity_constraint {
		!	IndexDomain: x;
		!	Definition: Storage_capacity(x) >= Storage_minimum_capacity(x);
		!}
		Constraint Storage_maximum_capacity_constraint {
			IndexDomain: x;
			Definition: Storage_capacity(x) <= Storage_maximum_capacity(x);
		}
		Constraint Storage_initialization_constraint_electricity1 {
			IndexDomain: (t,x) | t = first(Time) AND (x = 'Elec');
			Definition: Storage_SOC(t,x) = Storage_capacity(x) * Storage_min_SOC(x);
		}
		Constraint Storage_initialization_constrain_heat2 {
			IndexDomain: (t,x) | t = first(Time) AND (x = 'Heat');
			Definition: Storage_SOC(t,x) = Storage_SOC(last(Time),x);
		}
		Constraint Storage_initialization_constraint_heat3 {
			IndexDomain: (t,x) | t = first(Time) AND (x = 'Heat');
			Definition: Storage_output_energy(t,x) = 0;
		}
	}
	DeclarationSection Mathematical_programs {
		MathematicalProgram Cost_minimization {
			Objective: Total_cost;
			Direction: minimize;
			Constraints: AllConstraints;
			Variables: AllVariables;
			Type: Automatic;
		}
	}
	Procedure Main_Execution {
		Body: {
			empty AllVariables;
			Capacity('Heat','Gas_boiler').relax := 1;
			Capacity('Heat','Heat_pump').relax := 1;
			Capacity('Elec','Grid').relax := 1;
			Load_Input_Data;
			solve Cost_minimization;
			!Write_Output_Data;
		}
	}
	Procedure Load_Input_Data {
		Body: {
			Spreadsheet::RetrieveParameter( "electricity_demand.xlsx", Loads(t,'Elec'),"A1:A8760","electricity_demand");
			Spreadsheet::RetrieveParameter( "heating_demand.xlsx", Loads(t,'Heat'),"A1:A8760","heating_demand");
			Spreadsheet::RetrieveParameter( "solar_inputs.xlsx", Solar_radiation(t),"A1:A8760","solar");
		}
	}
	Procedure Main_Termination {
		Body: {
			return 1;
		}
	}
}
