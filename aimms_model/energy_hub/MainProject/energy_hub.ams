## ams_version=1.0
Model Energy_Hub_Model {
	DeclarationSection Sets {
		Set Time {
			SubsetOf: Integers;
			Index: t, s;
			InitialData: data{1 ..8760};
		}
		Set Energy_conversion_technologies {
			Index: conv;
			Definition: data {Gas_boiler,Grid};
		}
		Set Energy_storage_technologies {
			Index: stor;
			Definition: data {Hot_water_tank,Net_meter};
		}
		Set Energy_carriers {
			Index: x;
			Definition: data {Elec,Heat};
		}
		Set Hubs {
			Index: h,hh;
			Definition: data {1,2};
		}
	}
	DeclarationSection Parameters {
		Parameter Loads {
			IndexDomain: (t,x,h);
		}
		Parameter Operating_costs {
			IndexDomain: conv | conv <> 'Grid';
			Definition: data {Gas_boiler:0.09};
		}
		Parameter Operating_costs_grid {
			Definition:0.23;
		}
		Parameter OMV_costs {
			IndexDomain: conv;
			Definition: data {Gas_boiler:0,Grid:0 };
		}
		Parameter Electricity_feedin_price_renewables {
			Definition:0.05;
		}
		Parameter Electricity_feedin_price_nonrenewables {
			Definition:0.05;
		}
		Parameter Cmatrix {
			IndexDomain: (x,conv);
			Definition: { data {(Heat,Gas_boiler):0.94,(Elec,Grid):1}
			}
		}
		Parameter Capacity {
			IndexDomain:(conv,h);
			Definition: { data {(Gas_boiler,1):45,(Gas_boiler,2):45};
			}
		}
		Parameter Smatrix {
			IndexDomain: (x,stor);
			Definition: { data {(Heat,Hot_water_tank):1.0,(Elec,Net_meter):1.0}
			}
		}
		Parameter Storage_max_charge_rate {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.25,Net_meter:1 };
		}
		Parameter Storage_max_discharge_rate {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.25,Net_meter:1 };
		}
		Parameter Storage_standing_losses {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.01,Net_meter:0 };
		}
		Parameter Storage_charging_efficiency {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.9,Net_meter:1 };
		}
		Parameter Storage_discharging_efficiency {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0.9,Net_meter:1 };
		}
		Parameter Storage_min_SOC {
			IndexDomain: stor;
			Definition: data {Hot_water_tank:0,Net_meter:0 };
		}
		Parameter Storage_capacity {
			IndexDomain:(stor,h);
			Definition: { data {(Hot_water_tank,1):12.8,(Hot_water_tank,2):12.8};
			}
		}
		Parameter Link_installation  {
			IndexDomain: (x,h,hh);
			Definition: data {(Heat,1,2) : 1,(Elec,1,2) : 1 };
		}
		Parameter Link_length  {
			IndexDomain: (x,h,hh);
			Definition: data {(Heat,1,2):10,(Elec,1,2):10 };
		}
		Parameter Link_losses_per_meter  {
			IndexDomain: (x,h,hh);
			Definition: data {(Heat,1,2):0,(Elec,1,2):0 };
		}
		Parameter Link_capacity  {
			IndexDomain: (x,h,hh);
			Definition: data {(Heat,1,2):100,(Elec,1,2):10000 };
		}
		Parameter Technology_carbon_factors {
			IndexDomain: (conv);
			Definition: data {Gas_boiler:0.198,Grid:0.137 };
		}
		Parameter Big_M {
			Definition: 100000;
		}
	}
	DeclarationSection Variables {
		Variable Input_energy {
			IndexDomain: (t,conv,h);
			Range: nonnegative;
		}
		Variable Exported_energy_nonrenewable {
			IndexDomain: (t,x,h) | x = "Elec";
			Range: nonnegative;
		}
		Variable Exported_energy_renewable {
			IndexDomain: (t,x,h) | x = "Elec";
			Range: nonnegative;
		}
		Variable Exported_energy_storage {
			IndexDomain: (t,x,h) | x = "Elec";
			Range: nonnegative;
		}
		Variable Output_energy  {
			IndexDomain: (t,x,conv,h) | Cmatrix(x,conv) > 0;
			Range: nonnegative;
			Definition: Input_energy(t,conv,h) * Cmatrix(x,conv);
		}
		Variable Operating_cost_per_technology {
			IndexDomain: conv | conv <> 'Grid';
			Range: free;
			Definition: Operating_costs(conv) * sum((t,h),Input_energy(t,conv,h));
		}
		Variable Maintenance_cost_per_technology {
			IndexDomain: conv;
			Range: nonnegative;
			Definition: sum((t,x,h), Maintenance_cost_per_timestep(t,conv,x,h));
		}
		Variable Total_cost_per_technology {
			IndexDomain: conv | conv <> 'Grid';
			Range: free;
			Definition: Operating_cost_per_technology(conv) + Maintenance_cost_per_technology(conv);
		}
		Variable Total_cost_grid {
			Range: free;
			Definition: sum(conv | conv = 'Grid', Operating_cost_grid + Maintenance_cost_per_technology(conv));
		}
		Variable Storage_input_energy {
			IndexDomain: (t,stor,h);
			Range: nonnegative;
		}
		Variable Storage_output_energy {
			IndexDomain: (t,stor,h);
			Range: nonnegative;
		}
		Variable Storage_SOC {
			IndexDomain: (t,stor,h);
			Range: nonnegative;
		}
		Variable Link_flow {
			IndexDomain: (t,x,h,hh);
			Range: nonnegative;
		}
		Variable Link_operation {
			IndexDomain: (t,x,h,hh);
			Range: binary;
		}
		Variable Link_losses {
			IndexDomain: (t,x,h,hh);
			Range: nonnegative;
			Definition: Link_flow(t,x,h,hh) * Link_losses_per_meter(x,h,hh) * Link_length(x,h,hh);
		}
		Variable Energy_demands {
			IndexDomain: (t,x,h);
			Range: nonnegative;
			Definition: Loads(t,x,h);
		}
		Variable Total_carbon_per_technology {
			IndexDomain: conv;
			Range: free;
			Definition: Technology_carbon_factors(conv)*sum((t,h),Input_energy(t,conv,h));
		}
		Variable Total_carbon_per_timestep {
			IndexDomain: t;
			Range: free;
			Definition: sum((conv,h),Technology_carbon_factors(conv)*Input_energy(t,conv,h));
		}
	}
	DeclarationSection Objective_functions {
		Variable Operating_cost_grid {
			Range: free;
			Definition: sum(conv | conv = 'Grid', sum((t,h), Operating_costs_grid * Input_energy(t,conv,h)));
		}
		Variable Operating_cost {
			Range: free;
			Definition: sum(conv | conv <> 'Grid', Operating_costs(conv) * sum((t,h),Input_energy(t,conv,h)));
		}
		Variable Maintenance_cost {
			Range: nonnegative;
			Definition: sum((t,conv,x,h), Maintenance_cost_per_timestep(t,conv,x,h));
		}
		Variable Maintenance_cost_per_timestep {
			IndexDomain: (t,conv,x,h) | Cmatrix(x,conv) > 0;
			Range: free;
			Definition: Input_energy(t,conv,h) * Cmatrix(x,conv) * OMV_costs(conv);
		}
		Variable Income_via_exports {
			Range: nonnegative;
			Definition: sum(x | x = 'Elec', Electricity_feedin_price_renewables * sum((t,h), Exported_energy_renewable(t,x,h)) + Electricity_feedin_price_nonrenewables * sum((t,h), Exported_energy_nonrenewable(t,x,h)));
		}
		Variable Total_cost {
			Range: free;
			Definition: Operating_cost + Operating_cost_grid + Maintenance_cost + Income_via_exports;
		}
		Variable Total_carbon {
			Range: free;
			Definition: sum(conv,Technology_carbon_factors(conv)*sum((t,h),Input_energy(t,conv,h)));
		}
	}
	DeclarationSection Constraints {
		Constraint Load_balance_constraint {
			IndexDomain: (t,x,h);
			Definition:sum(conv, Input_energy(t,conv,h) * Cmatrix(x,conv)) + sum(stor, (Storage_output_energy(t,stor,h) - Storage_input_energy(t,stor,h)) * Smatrix(x,stor)) = Loads(t,x,h)+ Exported_energy_renewable(t,x,h) + Exported_energy_nonrenewable(t,x,h) + Exported_energy_storage(t,x,h) + sum(hh, Link_flow(t,x,hh,h) - Link_losses(t,x,hh,h) - Link_flow(t,x,h,hh));
		}
		Constraint Capacity_constraint_Gas_boiler {
			IndexDomain: (t,x,conv,h) | (conv = 'Gas_boiler') AND (x = 'Heat');
			Definition: Input_energy(t,conv,h) * Cmatrix(x,conv) <= Capacity(conv,h);
		}
		Constraint Electricity_export_nonsolar_constraint {
			IndexDomain: (t,x) | x='Elec';
			Definition: sum(h,Exported_energy_nonrenewable(t,x,h)) <= sum((h,conv) | (conv =), Input_energy(t,conv,h) * Cmatrix(x,conv));
		}
		Constraint Electricity_export_storage_constraint {
			IndexDomain: (t,x) | x='Elec';
			Definition: sum(h,Exported_energy_storage(t,x,h)) <= sum((h,stor) | (stor ='Net_meter'), (Storage_output_energy(t,stor,h)));
		}
		Constraint Storage_balance_constraint {
			IndexDomain: (t,stor,h) | t > first(Time);
			Definition: Storage_SOC(t,stor,h) = (1 - Storage_standing_losses(stor)) * Storage_SOC(t-1,stor,h) + Storage_charging_efficiency(stor) *  Storage_input_energy(t,stor,h) - (1 / Storage_discharging_efficiency(stor)) * Storage_output_energy(t,stor,h);
		}
		Constraint Storage_charging_rate_constraint {
			IndexDomain: (t,stor,h);
			Definition: Storage_input_energy(t,stor,h) <= Storage_max_charge_rate(stor) * Storage_capacity(stor,h);
		}
		Constraint Storage_discharging_rate_constraint {
			IndexDomain: (t,stor,h);
			Definition: Storage_output_energy(t,stor,h) <= Storage_max_discharge_rate(stor) * Storage_capacity(stor,h);
		}
		Constraint Storage_capacity_constraint {
			IndexDomain: (t,stor,h);
			Definition: Storage_SOC(t,stor,h) <= Storage_capacity(stor,h);
		}
		Constraint Storage_minimum_SOC_constraint {
			IndexDomain: (t,stor,h);
			Definition: Storage_SOC(t,stor,h) >= Storage_capacity(stor,h) * Storage_min_SOC(stor);
		}
		Constraint Storage_initialization_2 {
			IndexDomain: (t,stor,h) | t = first(Time);
			Definition: Storage_SOC(t,stor,h) = Storage_SOC(last(Time),stor,h);
		}
		Constraint Storage_initialization_3 {
			IndexDomain: (t,stor,h) | t = first(Time);
			Definition: Storage_output_energy(t,stor,h) = 0;
		}
		Constraint Link_installation_constraint {
			IndexDomain: (x,h,hh);
			Definition: Link_capacity(x,h,hh) <= Big_M * Link_installation(x,h,hh);
		}
		Constraint Link_operation_constraint {
			IndexDomain: (t,x,h,hh);
			Definition: Link_flow(t,x,h,hh) <= Big_M * Link_operation(t,x,h,hh);
		}
		Constraint Link_capacity_constraint {
			IndexDomain: (t,x,h,hh);
			Definition: Link_flow(t,x,h,hh) <= Link_capacity(x,h,hh);
		}
		Constraint Link_flow_direction_constraint {
			IndexDomain: (t,x,h,hh) | val(h) > val(hh);
			Definition: Link_operation(t,x,h,hh) + Link_operation(t,x,hh,h) <= 1;
		}
	}
	DeclarationSection Mathematical_programs {
		MathematicalProgram Cost_minimization {
			Objective: Total_cost;
			Direction: minimize;
			Constraints: AllConstraints;
			Variables: AllVariables;
			Type: Automatic;
		}
	}
	Procedure Main_Execution {
		Body: {
			empty AllVariables;
			Load_Input_Data;
			solve Cost_minimization;
			Write_Output_Data;
		}
	}
	Procedure Load_Input_Data {
		Body: {
			Spreadsheet::RetrieveParameter( "input_data/Heat_demand.xlsx", Loads(t,'Heat',h),"A1:B8760","demand");
			Spreadsheet::RetrieveParameter( "input_data/Elec_demand.xlsx", Loads(t,'Elec',h),"A1:B8760","demand");
			Spreadsheet::RetrieveParameter( "input_data/Heat_demand.xlsx", Loads(t,'Heat',h),"A1:B8760","demand");
			Spreadsheet::RetrieveParameter( "input_data/Elec_demand.xlsx", Loads(t,'Elec',h),"A1:B8760","demand");
		}
	}
	Procedure Write_Output_Data {
		Body: {
			Spreadsheet::CreateWorkbook("results/Experiment_002_01_no_sizing/results_demands.xlsx","Energy_demands");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_demands.xlsx","Energy_demands1");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_demands.xlsx",Energy_demands(t,x,'1'),"B2:C8761","A2:A8761","B1:C1","Energy_demands1",0,1,1);
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_demands.xlsx","Energy_demands2");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_demands.xlsx",Energy_demands(t,x,'2'),"B2:C8761","A2:A8761","B1:C1","Energy_demands2",0,1,1);
			Spreadsheet::CloseWorkbook("results/Experiment_002_01_no_sizing/results_demands.xlsx",1);
			Spreadsheet::CreateWorkbook("results/Experiment_002_01_no_sizing/results_conversion.xlsx","Input_energy");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_conversion.xlsx","Input_energy1");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_conversion.xlsx",Input_energy(t,conv,'1'),"B2:C8761","A2:A8761","B1:C1","Input_energy1",0,1,1);
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_conversion.xlsx","Exported_energy_renewable1");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_conversion.xlsx",Exported_energy_renewable(t,x,'1'),"B2:C8761","A2:A8761","B1:C1","Exported_energy_renewable1",0,1,1);
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_conversion.xlsx","Exported_energy_nonrenewable1");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_conversion.xlsx",Exported_energy_nonrenewable(t,x,'1'),"B2:C8761","A2:A8761","B1:C1","Exported_energy_nonrenewable1",0,1,1);
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_conversion.xlsx","Output_energy_Elec1");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_conversion.xlsx",Output_energy(t,'Elec',conv,'1'),"B2:C8761","A2:A8761","B1:C1","Output_energy_Elec1",0,1,1);
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_conversion.xlsx","Output_energy_Heat1");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_conversion.xlsx",Output_energy(t,'Heat',conv,'1'),"B2:C8761","A2:A8761","B1:C1","Output_energy_Heat1",0,1,1);
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_conversion.xlsx","Input_energy2");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_conversion.xlsx",Input_energy(t,conv,'2'),"B2:C8761","A2:A8761","B1:C1","Input_energy2",0,1,1);
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_conversion.xlsx","Exported_energy_renewable2");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_conversion.xlsx",Exported_energy_renewable(t,x,'2'),"B2:C8761","A2:A8761","B1:C1","Exported_energy_renewable2",0,1,1);
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_conversion.xlsx","Exported_energy_nonrenewable2");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_conversion.xlsx",Exported_energy_nonrenewable(t,x,'2'),"B2:C8761","A2:A8761","B1:C1","Exported_energy_nonrenewable2",0,1,1);
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_conversion.xlsx","Output_energy_Elec2");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_conversion.xlsx",Output_energy(t,'Elec',conv,'2'),"B2:C8761","A2:A8761","B1:C1","Output_energy_Elec2",0,1,1);
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_conversion.xlsx","Output_energy_Heat2");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_conversion.xlsx",Output_energy(t,'Heat',conv,'2'),"B2:C8761","A2:A8761","B1:C1","Output_energy_Heat2",0,1,1);
			Spreadsheet::CloseWorkbook("results/Experiment_002_01_no_sizing/results_conversion.xlsx",1);
			Spreadsheet::CreateWorkbook("results/Experiment_002_01_no_sizing/results_storage.xlsx","Storage_input_energy");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_storage.xlsx","Storage_input_energy1");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_storage.xlsx","Storage_output_energy1");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_storage.xlsx","Storage_SOC1");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_storage.xlsx",Storage_input_energy(t,stor,'1'),"B2:C8761","A2:A8761","B1:C1","Storage_input_energy1",0,1,1);
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_storage.xlsx",Storage_output_energy(t,stor,'1'),"B2:C8761","A2:A8761","B1:C1","Storage_output_energy1",0,1,1);
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_storage.xlsx",Storage_SOC(t,stor,'1'),"B2:C8761","A2:A8761","B1:C1","Storage_SOC1",0,1,1);
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_storage.xlsx","Storage_input_energy2");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_storage.xlsx","Storage_output_energy2");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_storage.xlsx","Storage_SOC2");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_storage.xlsx",Storage_input_energy(t,stor,'2'),"B2:C8761","A2:A8761","B1:C1","Storage_input_energy2",0,1,1);
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_storage.xlsx",Storage_output_energy(t,stor,'2'),"B2:C8761","A2:A8761","B1:C1","Storage_output_energy2",0,1,1);
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_storage.xlsx",Storage_SOC(t,stor,'2'),"B2:C8761","A2:A8761","B1:C1","Storage_SOC2",0,1,1);
			Spreadsheet::CloseWorkbook("results/Experiment_002_01_no_sizing/results_storage.xlsx",1);
			Spreadsheet::CreateWorkbook("results/Experiment_002_01_no_sizing/results_network.xlsx","Link_operation_Heat_1_2");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_network.xlsx","Link_flow_Heat_1_2");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_network.xlsx","Link_losses_Heat_1_2");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_network.xlsx",Link_operation(t,'Heat','1','2'),"B2:C8761","A2:A8761","B1:C1","Link_operation_Heat_1_2",0,1,3);
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_network.xlsx",Link_flow(t,'Heat','1','2'),"B2:C8761","A2:A8761","B1:C1","Link_flow_Heat_1_2",0,1,3);
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_network.xlsx",Link_losses(t,'Heat','1','2'),"B2:C8761","A2:A8761","B1:C1","Link_losses_Heat_1_2",0,1,3);
			Spreadsheet::CreateWorkbook("results/Experiment_002_01_no_sizing/results_network.xlsx","Link_operation_Elec_1_2");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_network.xlsx","Link_flow_Elec_1_2");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_network.xlsx","Link_losses_Elec_1_2");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_network.xlsx",Link_operation(t,'Elec','1','2'),"B2:C8761","A2:A8761","B1:C1","Link_operation_Elec_1_2",0,1,3);
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_network.xlsx",Link_flow(t,'Elec','1','2'),"B2:C8761","A2:A8761","B1:C1","Link_flow_Elec_1_2",0,1,3);
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_network.xlsx",Link_losses(t,'Elec','1','2'),"B2:C8761","A2:A8761","B1:C1","Link_losses_Elec_1_2",0,1,3);
			Spreadsheet::CloseWorkbook("results/Experiment_002_01_no_sizing/results_network.xlsx",1);
			Spreadsheet::CreateWorkbook("results/Experiment_002_01_no_sizing/results_costs.xlsx","Operating_cost_per_technology");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_costs.xlsx","Maintenance_cost_per_technology");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_costs.xlsx","Capital_cost_per_technology");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_costs.xlsx","Total_cost_per_technology");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_costs.xlsx","Operating_cost_grid");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_costs.xlsx","Total_cost_grid");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_costs.xlsx","Capital_cost_per_storage");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_costs.xlsx","Total_cost_per_storage");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_costs.xlsx","Income_via_exports");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_costs.xlsx",Maintenance_cost_per_technology,"B1:B3","A1:A3","","Maintenance_cost_per_technology",0,1,3);
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_costs.xlsx",Operating_cost_per_technology,"B1:B7","A1:A7","","Operating_cost_per_technology",0,1,3);
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_costs.xlsx",Total_cost_per_technology,"B1:B3","A1:A3","","Total_cost_per_technology",0,1,3);
			Spreadsheet::AssignValue("results/Experiment_002_01_no_sizing/results_costs.xlsx",Operating_cost_grid,"A1:A1","Operating_cost_grid");
			Spreadsheet::AssignValue("results/Experiment_002_01_no_sizing/results_costs.xlsx",Total_cost_grid,"A1:A1","Total_cost_grid");
			Spreadsheet::AssignValue("results/Experiment_002_01_no_sizing/results_costs.xlsx",Income_via_exports,"A1:A1","Income_via_exports");
			Spreadsheet::CloseWorkbook("results/Experiment_002_01_no_sizing/results_costs.xlsx",1);
			Spreadsheet::CreateWorkbook("results/Experiment_002_01_no_sizing/results_emissions.xlsx","Total_carbon_per_technology");
			Spreadsheet::AddNewSheet("results/Experiment_002_01_no_sizing/results_emissions.xlsx","Total_carbon_per_timestep");
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_emissions.xlsx",Total_carbon_per_technology,"B1:B2","A1:A2","","Total_carbon_per_technology",0,1,3);
			Spreadsheet::AssignTable("results/Experiment_002_01_no_sizing/results_emissions.xlsx",Total_carbon_per_timestep,"B1:B8760","A1:A8760","","Total_carbon_per_timestep",0,1,3);
			Spreadsheet::CloseWorkbook("results/Experiment_002_01_no_sizing/results_emissions.xlsx",1);
		}
	}
	Procedure Main_Termination {
		Body: {
			return 1;
		}
	}
}