## ams_version=1.0

Model Energy_Hub_Model {
    DeclarationSection sets {
        Set Scenarios {
            SubsetOf: Integers;
            Index: s;
            Definition: data{1};
        }
        Set Time {
            SubsetOf: Integers;
            Index: t;
            InitialData: data{1 ..168};
        }
        Set Energy_conversion_technologies {
            Index: conv;
            Definition: data {Gas_CHP,Gas_boiler,Grid,Heat_pump,Solar_PV,Solar_thermal};
        }
        Set Energy_carriers {
            Index: x;
            Definition: data {Elec,Heat};
        }
    }
    DeclarationSection parameters {
        Parameter Prob {
            IndexDomain: s;
            Definition: 100;
        }
        Parameter Storage_Init;
        Parameter pr_P_W_TRLplus {
            IndexDomain: (t);
            Range: nonnegative;
        }
        Parameter pr_P_D_TRLplus {
            IndexDomain: (t);
            Range: nonnegative;
        }
        Parameter pr_E_W_TRLplus {
            Range: nonnegative;
            Definition: 0.06;
        }
        Parameter pr_E_D_TRLplus {
            Range: nonnegative;
            Definition: 0.06;
        }
        Parameter a_TRLplus {
            IndexDomain: (t,s);
            Range: binary;
        }
        Parameter Loads {
            IndexDomain: (t,x);
        }
        Parameter Operating_costs {
            IndexDomain: conv | conv <> 'Grid';
            Definition: data {Gas_CHP:0.09,Gas_boiler:0.09,Heat_pump:0,Solar_PV:0,Solar_thermal:0};
        }
        Parameter Operating_costs_grid {
            Definition: 0.24;
        }
        Parameter OMV_costs {
            IndexDomain: conv;
            Definition: data {Gas_CHP:0,Gas_boiler:0,Grid:0,Heat_pump:0,Solar_PV:0,Solar_thermal:0 };
        }
        Parameter Electricity_feedin_price_renewables {
            Definition: 0.14;
        }
        Parameter Electricity_feedin_price_nonrenewables {
            Definition: 0.14;
        }
        Parameter Cmatrix {
            IndexDomain: (x,conv);
            Definition: data {(Elec,Grid):1,(Elec,Solar_PV):0.14,(Heat,Gas_boiler):0.94,(Heat,Heat_pump):3.2,(Heat,Solar_thermal):0.46,(Elec,Gas_CHP):0.3,(Heat,Gas_CHP):0.519,(Elec,Heat_pump):-1};
        }
        Parameter Capacity {
            IndexDomain: (x,conv);
            Definition: {
                data {(Elec,Solar_PV):50,(Heat,Heat_pump):100,(Heat,Gas_boiler):100,(Heat,Solar_thermal):50,(Elec,Gas_CHP):50,(Heat,Gas_CHP):86.5};
            }
        }
        Parameter Storage_max_charge_rate {
            IndexDomain: x;
            Definition: data {Elec:0.3,Heat:0.25 };
        }
        Parameter Storage_max_discharge_rate {
            IndexDomain: x;
            Definition: data {Elec:0.3,Heat:0.25 };
        }
        Parameter Storage_standing_losses {
            IndexDomain: x;
            Definition: data {Elec:0.001,Heat:0.01 };
        }
        Parameter Storage_charging_efficiency {
            IndexDomain: x;
            Definition: data {Elec:0.9,Heat:0.9 };
        }
        Parameter Storage_discharging_efficiency {
            IndexDomain: x;
            Definition: data {Elec:0.9,Heat:0.9 };
        }
        Parameter Storage_min_SOC {
            IndexDomain: x;
            Definition: data {Elec:0.3,Heat:0 };
        }
        Parameter Storage_capacity {
            IndexDomain: (x);
            Definition: {
                data {Elec:100,Heat:100};
            }
        }
        Parameter Solar_radiation {
            IndexDomain: t;
        }
        Parameter Big_M {
            Definition: 100000;
        }
    }
    DeclarationSection variables {
        Variable Income_E_W_TRLplus {
            IndexDomain: (t,x,s)| x='Elec';
            Range: nonnegative;
            Definition: pr_E_W_TRLplus*a_TRLplus(t,s)*P_W_TRLplus(t,x);
        }
        Variable Income_E_D_TRLplus {
            IndexDomain: (t,x,s)| x='Elec';
            Range: nonnegative;
            Definition: pr_E_D_TRLplus*a_TRLplus(t,s)*P_D_TRLplus(t,x);
        }
        Variable Income_P_W_TRLplus {
            IndexDomain: (t,x)| x='Elec';
            Range: nonnegative;
            Definition: pr_P_W_TRLplus(t)*P_W_TRLplus(t,x)/168;
        }
        Variable Income_P_D_TRLplus {
            IndexDomain: (t,x)| x='Elec';
            Range: nonnegative;
            Definition: pr_P_D_TRLplus(t)*P_D_TRLplus(t,x)/4;
        }
        Variable P_TRLplus_storage {
            IndexDomain: (t,x,s)| x="Elec";
            Range: nonnegative;
        }
        Variable P_W_TRLplus {
            IndexDomain: (t,x) | x="Elec";
            Range: nonnegative;
        }
        Variable P_D_TRLplus {
            IndexDomain: (t,x) | x="Elec";
            Range: nonnegative;
        }
        Variable Input_energy {
            IndexDomain: (t,conv,s);
            Range: nonnegative;
        }
        Variable Exported_energy_nonrenewable {
            IndexDomain: (t,x) | x = "Elec";
            Range: nonnegative;
        }
        Variable Exported_energy_renewable {
            IndexDomain: (t,x) | x = "Elec";
            Range: nonnegative;
        }
        Variable Operation {
            IndexDomain: (t,conv) | (conv ='Gas_CHP1' OR conv ='Gas_boiler' OR conv ='Heat_pump' OR conv ='Solar_PV' OR conv ='Solar_thermal');
            Range: binary;
        }
        Variable Output_energy_electricity {
            IndexDomain: (t,conv,s) | Cmatrix('Elec',conv) > 0;
            Range: nonnegative;
            Definition: Input_energy(t,conv,s) * Cmatrix('Elec',conv);
        }
        Variable Output_energy_heat {
            IndexDomain: (t,conv,s) | Cmatrix('Heat',conv) > 0;
            Range: nonnegative;
            Definition: Input_energy(t,conv,s) * Cmatrix('Heat',conv);
        }
        Variable Operating_cost_per_technology {
            IndexDomain: (conv,s)| conv <> 'Grid';
            Range: free;
            Definition: Operating_costs(conv) * sum(t,Input_energy(t,conv,s));
        }
        Variable Maintenance_cost_per_technology {
            IndexDomain: (conv,s);
            Range: nonnegative;
            Definition: sum((t,x), Maintenance_cost_per_timestep(t,conv,x,s));
        }
        Variable Total_cost_per_technology {
            IndexDomain: (conv,s)| conv <> 'Grid';
            Range: free;
            Definition: Operating_cost_per_technology(conv,s) + Maintenance_cost_per_technology(conv,s);
        }
        Variable Total_cost_grid {
            IndexDomain: s;
            Range: free;
            Definition: sum(conv | conv = 'Grid', Operating_cost_grid(s) + Maintenance_cost_per_technology(conv,s));
        }
        Variable Storage_input_energy {
            IndexDomain: (t,x,s);
            Range: nonnegative;
        }
        Variable Storage_output_energy {
            IndexDomain: (t,x);
            Range: nonnegative;
        }
        Variable Storage_SOC {
            IndexDomain: (t,x,s);
            Range: nonnegative;
        }
        Variable Energy_demands {
            IndexDomain: (t,x);
            Range: nonnegative;
            Definition: Loads(t,x);
        }
    }
    DeclarationSection Objective_functions {
        Variable IncomeAvail {
            Range: nonnegative;
            Definition: sum(t, pr_P_W_TRLplus(t)*P_W_TRLplus(t,'Elec'))/168 +  sum(t, pr_P_D_TRLplus(t)*P_D_TRLplus(t,'Elec'))/4;
        }
        Variable Operating_cost_grid {
            IndexDomain: s;
            Range: free;
            Definition: sum(conv | conv = 'Grid', sum(t, Operating_costs_grid * Input_energy(t,conv,s)));
        }
        Variable Operating_cost {
            IndexDomain: s;
            Range: free;
            Definition: sum(conv | conv <> 'Grid', Operating_costs(conv) * sum(t,Input_energy(t,conv,s)));
        }
        Variable Maintenance_cost {
            IndexDomain: s;
            Range: nonnegative;
            Definition: sum((t,conv,x), Maintenance_cost_per_timestep(t,conv,x,s));
        }
        Variable Maintenance_cost_per_timestep {
            IndexDomain: (t,conv,x,s)| Cmatrix(x,conv) > 0;
            Range: free;
            Definition: Input_energy(t,conv,s) * Cmatrix(x,conv) * OMV_costs(conv);
        }
        Variable Income_via_exports {
            IndexDomain: s;
            Range: nonnegative;
            Definition: sum(x | x = 'Elec', Electricity_feedin_price_renewables * sum(t, Exported_energy_renewable(t,x)) + Electricity_feedin_price_nonrenewables * sum(t, Exported_energy_nonrenewable(t,x))) + pr_E_W_TRLplus*sum(t,a_TRLplus(t,s)*P_W_TRLplus(t,'Elec'))*4/4 +  pr_E_D_TRLplus*sum(t,a_TRLplus(t,s)*P_D_TRLplus(t,'Elec'))*4/4;
        }
        Variable Total_cost {
            Range: free;
            Definition: {
                -IncomeAvail + sum(s,Prob(s)*(Operating_cost(s) + Operating_cost_grid(s) + Maintenance_cost(s) - Income_via_exports(s)))/1
                !1 = number of scenarios which here is one.
            }
        }
    }
    DeclarationSection constraints {
        Constraint P_TRLplus_bid_constraint {
            IndexDomain: (t,x,s);
            Definition: P_W_TRLplus(t,x) + P_D_TRLplus(t,x) <= sum(conv, Capacity('Elec',conv)) - Loads(t,x) - Exported_energy_renewable(t,'Elec') - Exported_energy_nonrenewable(t,'Elec') + P_TRLplus_storage(t,'Elec',s);
        }
        Constraint P_W_TRLplus_week_constraint {
            IndexDomain: (t,x) | mod(t,168) <> 0 AND t<>first(Time) AND x="Elec";
            Definition: P_W_TRLplus(t,x) = P_W_TRLplus(t-1,x);
        }
        Constraint P_D_TRLplus_4h_constraint {
            IndexDomain: (t,x) | mod(mod(t,24),4) <> 0 AND x="Elec";
            Definition: P_D_TRLplus(t,x) = P_D_TRLplus(t+1,x);
        }
        Constraint Pstorage_TRLplus_energy_constraint {
            IndexDomain: (t,x,s) | x="Elec";
            Definition: P_TRLplus_storage(t,x,s) <= Storage_SOC(t,x,s) - (Storage_capacity(x) * Storage_min_SOC(x));
        }
        Constraint Pstorage_TRLplus_discharge_constraint {
            IndexDomain: (t,x,s) | x="Elec";
            Definition: P_TRLplus_storage(t,x,s) <= Storage_max_discharge_rate(x)*Storage_capacity(x);
        }
        Constraint Load_balance_constraint {
            IndexDomain: (t,x,s);
            Definition: sum(conv, Input_energy(t,conv,s) * Cmatrix(x,conv)) + Storage_output_energy(t,x) - Storage_input_energy(t,x,s) = Loads(t,x) + Exported_energy_renewable(t,x) + Exported_energy_nonrenewable(t,x)+ a_TRLplus(t,s)*P_W_TRLplus(t,x) + a_TRLplus(t,s)*P_D_TRLplus(t,x);
        }
        Constraint Capacity_constraint {
            IndexDomain: (t,x,conv,s) | Cmatrix(x,conv) > 0 AND (conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump');
            Definition: Input_energy(t,conv,s) * Cmatrix(x,conv) <= Capacity(x,conv);
        }
        Constraint Dispatch_constraint {
            IndexDomain: (t,x,conv,s) | Cmatrix(x,conv) > 0 AND (conv ='Gas_CHP' OR conv ='Gas_boiler' OR conv ='Heat_pump' OR conv ='Solar_PV' OR conv ='Solar_thermal');
            Definition: Input_energy(t,conv,s) * Cmatrix(x,conv) <= Big_M * Operation(t,conv);
        }
        Constraint Solar_input_constraint {
            IndexDomain: (t,conv,x,s) | Cmatrix(x, conv) > 0 AND (conv ='Solar_PV' OR conv ='Solar_thermal');
            Definition: Input_energy(t,conv,s) <= Solar_radiation(t) * Capacity(x,conv) / 1000;
        }
        Constraint Electricity_export_solar_constraint {
            IndexDomain: (t,x,s) | x='Elec';
            Definition: Exported_energy_renewable(t,x) <= sum(conv | (conv ='Solar_PV'), Input_energy(t,conv,s) * Cmatrix(x,conv));
        }
        Constraint Electricity_export_nonsolar_constraint {
            IndexDomain: (t,x,s) | x='Elec';
            Definition: Exported_energy_nonrenewable(t,x) <= sum(conv | (conv ='Gas_CHP'), Input_energy(t,conv,s) * Cmatrix(x,conv));
        }
        Constraint Storage_balance_constraint {
            IndexDomain: (t,x,s) | t > first(Time);
            Definition: Storage_SOC(t,x,s) = (1 - Storage_standing_losses(x)) * Storage_SOC(t-1,x,s) + Storage_charging_efficiency(x) *  Storage_input_energy(t,x,s) - (1 / Storage_discharging_efficiency(x)) * Storage_output_energy(t,x);
        }
        Constraint Storage_charging_rate_constraint {
            IndexDomain: (t,x,s);
            Definition: Storage_input_energy(t,x,s) <= Storage_max_charge_rate(x) * Storage_capacity(x);
        }
        Constraint Storage_discharging_rate_constraint {
            IndexDomain: (t,x);
            Definition: Storage_output_energy(t,x) <= Storage_max_discharge_rate(x) * Storage_capacity(x);
        }
        Constraint Storage_capacity_constraint {
            IndexDomain: (t,x,s);
            Definition: Storage_SOC(t,x,s) <= Storage_capacity(x);
        }
        Constraint Storage_minimum_SOC_constraint {
            IndexDomain: (t,x,s);
            Definition: Storage_SOC(t,x,s) >= Storage_capacity(x) * Storage_min_SOC(x);
        }
        Constraint Storage_initialization_constraint_electricity1 {
            IndexDomain: (t,x,s) | t = first(Time) AND (x = 'Elec');
            Definition: Storage_SOC(t,x,s) = Storage_init;
        }
        Constraint Storage_initialization_constraint_heat3 {
            IndexDomain: (t,x) | t = first(Time) AND (x = 'Heat');
            Definition: Storage_output_energy(t,x) = 0;
        }
    }
    DeclarationSection Mathematical_programs {
        MathematicalProgram Cost_minimization {
            Objective: Total_cost;
            Direction: minimize;
            Constraints: AllConstraints;
            Variables: AllVariables;
            Type: Automatic;
        }
    }
    Procedure MainExecution {
        Body: {
            			empty AllVariables;
            			Load_Input_Data;
            			solve Cost_minimization;
            			Write_Output_Data;
        }
    }
    Procedure Load_Input_Data {
        Body: {
            
            			Spreadsheet::RetrieveParameter( "electricity_demand.xlsx", Loads(t,'Elec'),"A1:A168","electricity_demand");
            			Spreadsheet::RetrieveParameter( "heating_demand.xlsx", Loads(t,'Heat'),"A1:A168","heating_demand");
            			Spreadsheet::RetrieveParameter( "solar_inputs.xlsx", Solar_radiation(t),"A1:A168","solar");
            			Spreadsheet::RetrieveParameter( "Hourly TRLplus activation 2016 binary.xlsx", a_TRLplus(t,s),"A1:A168","hour of activation");
            			Spreadsheet::RetrieveParameter( "TRL+ weekly prices over hour.xlsx", pr_P_W_TRLplus(t),"A1:A168","TRL+week price");
            			Spreadsheet::RetrieveParameter( "TRL+ 4h capacity prices over hour.xlsx", pr_P_D_TRLplus(t),"A1:A168","TRL+ P_4h price");
        }
    }
    Procedure Write_Output_Data {
        Body: {
            			Spreadsheet::CreateWorkbook("results/Generic_energy_hub_experiment_without_sizing/results_demands.xlsx","Energy_demands");
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_demands.xlsx",Energy_demands,"B2:C8761","A2:A8761","B1:C1","Energy_demands",0,1,1);
            			Spreadsheet::CloseWorkbook("results/Generic_energy_hub_experiment_without_sizing/results_demands.xlsx",1);
            			Spreadsheet::CreateWorkbook("results/Generic_energy_hub_experiment_without_sizing/results_conversion.xlsx","Input_energy");
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_conversion.xlsx",Input_energy,"B2:I8761","A2:A8761","B1:I1","Input_energy",0,1,1);
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_conversion.xlsx","Exported_energy_renewable");
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_conversion.xlsx",Exported_energy_renewable,"B2:C8761","A2:A8761","B1:C1","Exported_energy_renewable",0,1,1);
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_conversion.xlsx","Exported_energy_nonrenewable");
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_conversion.xlsx",Exported_energy_nonrenewable,"B2:C8761","A2:A8761","B1:C1","Exported_energy_nonrenewable",0,1,1);
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_conversion.xlsx","Output_energy_electricity");
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_conversion.xlsx",Output_energy_electricity,"B2:I8761","A2:A8761","B1:I1","Output_energy_electricity",0,1,1);
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_conversion.xlsx","Output_energy_heat");
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_conversion.xlsx",Output_energy_heat,"B2:I8761","A2:A8761","B1:I1","Output_energy_heat",0,1,1);
            			Spreadsheet::CloseWorkbook("results/Generic_energy_hub_experiment_without_sizing/results_conversion.xlsx",1);
            			Spreadsheet::CreateWorkbook("results/Generic_energy_hub_experiment_without_sizing/results_storage.xlsx","Storage_input_energy");
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_storage.xlsx","Storage_output_energy");
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_storage.xlsx","Storage_SOC");
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_storage.xlsx",Storage_input_energy,"B2:C8761","A2:A8761","B1:C1","Storage_input_energy",0,1,1);
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_storage.xlsx",Storage_output_energy,"B2:C8761","A2:A8761","B1:C1","Storage_output_energy",0,1,1);
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_storage.xlsx",Storage_SOC,"B2:C8761","A2:A8761","B1:C1","Storage_SOC",0,1,1);
            			Spreadsheet::CloseWorkbook("results/Generic_energy_hub_experiment_without_sizing/results_storage.xlsx",1);
            			Spreadsheet::CreateWorkbook("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx","Operating_cost_per_technology");
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx","Maintenance_cost_per_technology");
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx","Capital_cost_per_technology");
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx","Total_cost_per_technology");
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx","Operating_cost_grid");
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx","Total_cost_grid");
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx","Capital_cost_per_storage");
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx","Total_cost_per_storage");
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx","Income_via_exports");
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx",Operating_cost_per_technology,"B1:B7","A1:A7","","Operating_cost_per_technology",0,1,3);
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx",Total_cost_per_technology,"B1:B9","A1:A9","","Total_cost_per_technology",0,1,3);
            			!Spreadsheet::AssignValue("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx",Operating_cost_grid,"B1:B2","A1:A2","Operating_cost_grid",0,1,3);
            			!Spreadsheet::AssignValue("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx",Total_cost_grid,"A1:A1","Total_cost_grid");
            			!Spreadsheet::AssignValue("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx",Income_via_exports,"A1:A1","Income_via_exports");
            			Spreadsheet::CloseWorkbook("results/Generic_energy_hub_experiment_without_sizing/results_costs.xlsx",1);
            
            
            
            
            			Spreadsheet::CreateWorkbook("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx","P_TRLplus");
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",P_W_TRLplus,"B2:C8761","A2:A8761","B1:C1","P_TRLplus",0,1,1);
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",P_D_TRLplus,"E2:F8761","D2:D8761","E1:F1","P_TRLplus",0,1,1);
                                   ! Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",E_LM_TRLplus,"H2:I8761","G2:G8761","H1:I1","P_TRLplus",0,1,1);
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx","P_TRLplus_storage");
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",P_TRLplus_storage,"B2:C8761","A2:A8761","B1:C1","P_TRLplus_storage",0,1,1);
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx","Income_E_TRLplus");
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",Income_E_W_TRLplus,"B2:C8761","A2:A8761","B1:C1","Income_E_TRLplus",0,1,1);
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",Income_E_D_TRLplus,"E2:F8761","D2:D8761","E1:F1","Income_E_TRLplus",0,1,1);
            			!Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",Income_E_LM_TRLplus,"H2:I8761","G2:G8761","H1:I1","Income_E_TRLplus",0,1,1);
            			Spreadsheet::AddNewSheet("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx","Income_P_TRLplus");
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",Income_P_W_TRLplus,"B2:C8761","A2:A8761","B1:C1","Income_P_TRLplus",0,1,1);
            			Spreadsheet::AssignTable("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",Income_P_D_TRLplus,"E2:F8761","D2:D8761","E1:F1","Income_P_TRLplus",0,1,1);
            			Spreadsheet::CloseWorkbook("results/Generic_energy_hub_experiment_without_sizing/results_TRLplus.xlsx",1);
        }
    }
    Procedure Main_Termination {
        Body: {
            			return 1;
        }
    }
}
